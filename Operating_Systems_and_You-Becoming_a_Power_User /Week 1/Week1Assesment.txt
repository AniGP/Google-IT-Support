Windows : 
----------

Everything is done via GUI.

Linux : 
-------

Creating directories (folders)

Directories (folders) in Linux are created using the mkdir command. The command takes the directory name as the argument.

Example 1

mkdir dir_name

Multiple directories can be supplied as arguments, and mkdir will create all of them.

Example 2

mkdir dir1 dir2 dir3

Parameters

mkdir can take three options:

-p: allow mkdir to create parent directories if they don't exist
-m: (mode) used to set permissions of directories during creation
-v: run command in verbose mode
Let's take a look at how to use mkdir by going through an example.

In this Linux virtual machine, directory /home/user/Desktop contains a file called "colors". We'll open the file, and for every line listed in it, we'll create a new folder with that name in the directory /home/user/Documents

Step 1: Change into working directory.

cd /home/user/Documents

Step 2: Show the contents of the file "colors" within the "Desktop" directory.

cat /home/user/Desktop/colors

Step 3: Create the directories.

mkdir red blue green yellow magenta

Removing empty directories

To remove empty directories, use the rmdir command. The name of the directory to be removed is passed as an argument.

Example 1

rmdir dir_name

Multiple directory names can be passed as arguments, and rmdir will remove all of them.

Example 2

rmdir dir1 dir2 dir3 dir4

Head's up: rmdir only removes empty directories. To remove a non-empty directory, the command rm, discussed later in this course, is used.

Options

rmdir takes only one option, which tells it to remove parent directories if they're also empty.

-p: remove parent directories, if they're also empty
Creating files

By default, the touch command is used to change the modification and access times of a file. If the file doesn't exist, the touch command is used to create a file with default permissions.

Let's take a look at an example of how to use the touch command. In the current directory, we can create an empty file called "empty_file":

touch empty_file

The touch command can take the c option to prevent a new file from being created.

Options

-c: do not create file if it doesn't exist

Copying, moving and deleting files and directories (folders)

cp

The cp command is used to make a copy of one or more directories or files. The command takes at least one source name and one target name. If the target is a file, then the source must also be a file. A copy of the source will be made with the new name supplied in target. If the target name isn't specified, a copy of source will be made in the target directory under the same name. If a file with the target name already exists in the target directory, it'll be replaced. If the target is an existing directory, then all sources (one or more) will be copied into the target directory. If the target is a directory that doesn't exist, then the source must also be a directory. A copy of the directory and its contents will be made in target under the same name.

Example 1

Copy the file "source_file" in the directory /home/user/ to the directory "duplicates" as "target_file".

cp /home/user/source_file /home/user/duplicates/target_file

The duplicates directory now contains a copy of the original file.

mv

The move command is used to move one or more files or directories into a different location, or rename them to a new name. You're required to pass at least one source and target file names or directories. The mv command follows the rules for existing or non-existing directories or files, as does cp.

Example 2

Move the file "source_file" in /home/user/ to the directory "moved_files" and give it the name "target_name".

mv /home/user/source_file /home/user/moved_files/target_file

The original directory doesn't contain the file now. It's been moved to the new directory "moved_files".

rm

The rm command is used to remove one or more files. You need to supply at least one argument to remove.

Example 3

We can remove the duplicate file we created in the directory "duplicates" using rm

rm /home/user/duplicates/target_file

Let's see how to copy, move, and rename files by going through a few examples.

In the directory /home/user/Pictures, we'll take all the hidden files and move them into the directory /home/user/Documents/Hidden

Step 1: Change into the Pictures directory.

cd /home/user/Pictures

Step 2: Show the directory contents, including hidden files.

ls -a

Step 3: Move the hidden files into the target directory.

mv .apple .banana .broccoli .milk /home/user/Documents/Hidden

In the directory /home/user/Movies, there's a folder called "Europe Pictures". We'll move this folder into the correct directory for pictures: /home/user/Pictures. Note the use of the backslash "\" to escape the space between "Europe" and "Pictures" in the directory name, "Europe Pictures".

mv /home/user/Movies/Europe\ Pictures /home/user/Pictures

You can also use a "dot" to copy or move files to the current directory. In the directory /home/user/Images, we can move the file "Vacation.JPG" into the Pictures directory. To do that, we change into the Pictures directory, then add a "dot" to the mv command as the target.

cd /home/user/Pictures

mv /home/user/Images/Vacation.JPG .

Some files in the directory /home/user/Music need to be cleaned up. We'll see an example of removing files and directories by removing-:

Best_of_the_90s
80s_jams
Classical
Rock (folder)

Step 1: Navigate to the Music folder.

cd /home/user/Music

Step 2: Remove files.

rm Best_of_the_90s 80s_jams Classical

Step 3: Remove the directory.

rmdir Rock

To remove a directory with content, the rm command is used instead of rmdir. The option -r tells the command to remove the directory, along with its content recursively.

Example 4

rm -r non_empty_dir

Searching in files

grep

grep is a super powerful Linux command used to search through files for the occurrence of a string of characters that matches a specified pattern. We can use the command in combination with a bunch of different options and flags for efficient searching.

Options and flags

-r: search recursively
-w: match the whole word
-n: only in line number
-e: match pattern
--include and --exclude: include and exclude files in the search
--include-dir and --exclude-dir: include or exclude directories in the search
Let's take a look at the grep command in action. In the directory /home/user/Downloads of your virtual machine, a number of files exist. We'll find the files that have the word "vacation" in them, and move them to /home/user/Documents

Step 1: Find files.

grep -rw /home/user/Downloads -e "vacation"

Step 2: Move the directories that match into the target directory.

mv /home/user/Downloads/Iceland /home/user/Downloads/Japan /home/user/Documents


Editing files

Lots of Linux distributions come with pre-installed text editors. The most popular ones are vi and nano, which will be included in nearly every distribution. Other text editors, like Emacs and Gedit, might also be present. In this lab, we'll modify files using the Nano editor.

You can use the nano command to open the Nano editor and modify an existing file, or create a new one. To edit an existing file, we'll first start with opening it.

Example:

nano /path/to/existing/file

The command will open the file in the terminal and display the current file contents. To modify, you can edit the content in the terminal, just like a normal editor. The editor is managed using various shortcuts.

To save modifications to the file, use Ctrl+O-:

CTRL-O

Once editing is done, we can close and exit the program using Ctrl+X

CTRL-X

NB: At any point in using the editor, you can get help using Ctrl+G

CTRL-G

To exit help mode, use Ctrl+X

CTRL-X

Alright, now let's practice how to edit files using nano.

In the current directory, create an empty file called editor_test.txt

touch editor_test.txt

Open the file with the Nano editor.

nano editor_test.txt

Add content to the file. (In this case, we add five lines, each separated by an empty line.)

CTRL-O

You'll need to confirm the file that you want to write the content to by hitting Enter. After this, exit the program by hitting Ctrl+X

CTRL-X